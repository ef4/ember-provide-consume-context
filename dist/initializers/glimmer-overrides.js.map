{"version":3,"file":"glimmer-overrides.js","sources":["../../src/-private/opcodes.ts","../../src/-private/@glimmer/opcodes.ts","../../src/-private/override-glimmer-runtime-classes.ts","../../src/initializers/glimmer-overrides.ts"],"sourcesContent":["import type { ComponentInstance } from '@glimmer/interfaces';\nimport type { UpdatingVM } from '@glimmer/runtime';\n\nexport class ProvideConsumeContextUpdateOpcode {\n  // \"instance\" is a VM component instance\n  constructor(private instance: ComponentInstance) {}\n\n  // vm is an instance of the updating VM:\n  // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/update.ts#L33\n  evaluate(vm: UpdatingVM) {\n    vm.env.provideConsumeContextContainer?.enter(this.instance);\n  }\n}\n\nexport class ProvideConsumeContextDidRenderOpcode {\n  // \"instance\" is a VM component instance\n  constructor(private instance: ComponentInstance) {}\n\n  // vm is an instance of the updating VM:\n  // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/update.ts#L33\n  evaluate(vm: UpdatingVM) {\n    vm.env.provideConsumeContextContainer?.exit(this.instance);\n  }\n}\n","// We can't use enums from @glimmer/interfaces due to the issue below:\n// https://github.com/glimmerjs/glimmer-vm/issues/1294\n// We can use type imports, but an enum would need to be transformed into JS,\n// which fails.\n// We copy the opcodes from the source into here, and only the ones that are\n// relevant to us.\n// This is safe, because the opcodes should be stable.\n// https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/vm/lib/opcodes.ts#L196\nexport const enum Op {\n  GetComponentSelf = 90,\n  DidRenderLayout = 100,\n}\n","import {\n  ProvideConsumeContextDidRenderOpcode,\n  ProvideConsumeContextUpdateOpcode,\n} from './opcodes';\nimport { ProvideConsumeContextContainer } from './provide-consume-context-container';\nimport type { ComponentInstance } from '@glimmer/interfaces';\nimport type {\n  LowLevelVM as GlimmerLowLevelVM,\n  EnvironmentImpl as GlimmerEnvironmentImpl,\n} from '@glimmer/runtime';\nimport { Op } from './@glimmer/opcodes';\n\nfunction overrideVM(runtime: any) {\n  const LowLevelVM = runtime.LowLevelVM as typeof GlimmerLowLevelVM;\n  const originalNext = LowLevelVM.prototype.next;\n\n  // We can't reach into the opcode definitions themselves, but we can hook into\n  // when they're evaluated (\"next\"), and execute additional code when the\n  // opcodes we're interested are called.\n  // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/append.ts#L603C1-L603C1\n  LowLevelVM.prototype.next = function () {\n    // The actual evaluation happens in the \"low level VM\":\n    // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/vm/low-level.ts#L112\n    // but that isn't exposed to us.\n    // Luckily, the VM we do have access to exposes the \"pc\" register, and the\n    // \"program\" instance, which is all we need to get the current opcode.\n    const opcode = this.program.opcode(this.pc);\n\n    if (opcode.type === Op.GetComponentSelf) {\n      // Get the component instance from the VM\n      // (that's the VM's component instance, not the Glimmer Component one)\n      // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/compiled/opcodes/component.ts#L579\n      const instance = this.fetchValue<ComponentInstance>(opcode.op1);\n\n      // Add the component to the stack\n      this.env.provideConsumeContextContainer?.enter(instance);\n      // When there are updates/rerenders, make sure we add to the stack again\n      this.updateWith(new ProvideConsumeContextUpdateOpcode(instance));\n    }\n\n    if (opcode.type === Op.DidRenderLayout) {\n      // Get the component instance from the VM\n      // (that's the VM's component instance, not the Glimmer Component one)\n      // https://github.com/glimmerjs/glimmer-vm/blob/68d371bdccb41bc239b8f70d832e956ce6c349d8/packages/%40glimmer/runtime/lib/compiled/opcodes/component.ts#L832\n      const instance = this.fetchValue<ComponentInstance>(opcode.op1);\n\n      // After the component has rendered, remove it from the stack\n      this.env.provideConsumeContextContainer?.exit(instance);\n      // On updates/rerenders, make sure to remove from the stack again\n      this.updateWith(new ProvideConsumeContextDidRenderOpcode(instance));\n    }\n\n    return originalNext.apply(this);\n  };\n}\n\nfunction overrideEnvironment(runtime: any) {\n  const EnvironmentImpl =\n    runtime.EnvironmentImpl as typeof GlimmerEnvironmentImpl;\n\n  const originalBegin = EnvironmentImpl.prototype.begin;\n  EnvironmentImpl.prototype.begin = function () {\n    if (this.provideConsumeContextContainer == null) {\n      this.provideConsumeContextContainer =\n        new ProvideConsumeContextContainer();\n    }\n\n    // When a render transaction is started, let our container know to reset\n    // the stack\n    (this as any).provideConsumeContextContainer?.begin();\n\n    return originalBegin.apply(this);\n  };\n\n  const originalCommit = EnvironmentImpl.prototype.commit;\n  EnvironmentImpl.prototype.commit = function () {\n    if (this.provideConsumeContextContainer == null) {\n      this.provideConsumeContextContainer =\n        new ProvideConsumeContextContainer();\n    }\n\n    // When a render transaction is finished, let our container lnow to reset\n    // the stack\n    this.provideConsumeContextContainer?.commit();\n\n    return originalCommit.apply(this);\n  };\n}\n\nexport function overrideGlimmerRuntime(runtime: any) {\n  overrideVM(runtime);\n  overrideEnvironment(runtime);\n}\n","import Ember from 'ember';\nimport { overrideGlimmerRuntime } from '../-private/override-glimmer-runtime-classes';\n\nexport function initialize() {\n  if ((Ember as any).__loader?.require == null) {\n    return;\n  }\n\n  const glimmerRuntime = (Ember as any).__loader.require('@glimmer/runtime');\n  if (glimmerRuntime == null) {\n    return;\n  }\n\n  overrideGlimmerRuntime(glimmerRuntime);\n}\n\nexport default {\n  initialize,\n};\n"],"names":["ProvideConsumeContextUpdateOpcode","constructor","instance","evaluate","vm","env","provideConsumeContextContainer","enter","ProvideConsumeContextDidRenderOpcode","exit","Op","overrideVM","runtime","LowLevelVM","originalNext","prototype","next","opcode","program","pc","type","GetComponentSelf","fetchValue","op1","updateWith","DidRenderLayout","apply","overrideEnvironment","EnvironmentImpl","originalBegin","begin","ProvideConsumeContextContainer","originalCommit","commit","overrideGlimmerRuntime","initialize","Ember","__loader","require","glimmerRuntime"],"mappings":"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"}